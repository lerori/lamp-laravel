version: "2"

services:
################ LAMP Stack.
    php-fpm:
# Pls, check image tags, latest is php-7, but we have php-5 too.
        # build: docker/images/php-fpm/.
        image: lordius/alpine-php_fpm
        # image: lordius/alpine-php_fpm:php-5
        # image: lordius/alpine-php_fpm:php-7
        links:
            - mailhog            
            - mysql            
            # - postgres
            # - mongo
            # - redis
            # - memcached
            # - solr
        depends_on:
            - mailhog
            - mysql
            # - postgres
            # - mongo
            # - redis
            # - memcached
            # - solr            
        volumes:
            - ./crontasks.txt:/home/crontasks.txt
            - ./htdocs:/var/www/localhost/htdocs
            # Attach sample configs if necessary.            
            # - ./docker/runtime/php7:/temp_configs_dir/php7            
            # - ./docker/runtime/php5:/temp_configs_dir/php5
        environment:
            DRUSH_VERSION: 8.x
            PHP_SHOW_ERRORS: 1
            CRONTAB_ENABLED: 0
            PHP_FPM_PORT: 7000
            PHP_SENDMAIL_PATH: /usr/sbin/sendmail -i -t
            PHP_SENDMAIL_HOST: mailhog
            PHP_SENDMAIL_PORT: 1025
            PHP_XDEBUG_ENABLED: 1
            PHP_XDEBUG_PORT: 9000
            PHP_MAX_EXECUTION_TIME: 250
            PHP_UPLOAD_MAX_FILESIZE: 1024M
            PHP_POST_MAX_SIZE: 756M
            PHP_ALLOW_URL_FOPEN: "On"
            PHP_ALWAYS_POPULATE_RAW_POST_DATA: -1
            PHP_SHORT_OPEN_TAG: 1
            PHP_MEMORY_LIMIT: 1024M
        networks:
            internal:
            shared:
                ipv4_address: 172.55.0.2
        extra_hosts:
            - "site.dockerlamp:172.55.0.4" 

    apache2_mpm:
        image: lordius/alpine-apache
        links:
            - php-fpm
        depends_on:
            - php-fpm
        # Attach sample configs if necessary.            
        # volumes:
        #     - ./docker/runtime/apache2:/temp_configs_dir/apache2
        volumes_from:
            - php-fpm
        environment:
            APACHE_TIMEOUT: 300
            DOCUMENT_ROOT: /var/www/localhost/htdocs
            PROXY_PASS: fcgi://php-fpm:7000/var/www/localhost/htdocs
            APACHE_LISTEN_PORT: 80
        networks:
            internal:
            shared:
                ipv4_address: 172.55.0.3

################ Node stack.
    # node:
    #     image: node:alpine
    #     links:
    #         - mongo
    #     depends_on:
    #         - mongo
    #     environment:
    #     - NODE_ENV=production
    #     volumes:
    #         - ./htdocs:/usr/src/app
    #     working_dir: /usr/src/app
    #     expose:
    #     - "3000"
    # # You could use any command to running. Or run without any command and execute code inside image.
    # # E.g: `docker exec -it dockercomposelamp_node_1 ash` and then inside container go to `/usr/src/app` and run node.
    #     # command: ash -c "PORT=3000 DEBUG=htdocs:* npm start"
    #     command: ash -c "PORT=3000 node server.js"
    #     networks:
    #         internal:
    #         shared:
    #             ipv4_address: 172.55.0.5
              
################ Extra toolkit images.
    mailhog:
        image: mailhog/mailhog
        networks:
            internal:
            shared:
                ipv4_address: 172.55.0.6

################ DB managers.
# Requires mysql container.                
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        links:
            - mysql
        depends_on:
            - mysql
        environment:
            PMA_HOST: mysql
            PHP_UPLOAD_MAX_FILESIZE: 1G
            PHP_MAX_INPUT_VARS: 1G
        networks:
            internal:
            shared:
                ipv4_address: 172.55.0.9

################ Database images.
    mysql:
        image: mysql:5.7
        # build: docker/images/mysql/
        ports:
            - "3306:3306"
        volumes:
            - ./docker/runtime/mysql/lib:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_USER: leo
            MYSQL_PASSWORD: 123456
            MYSQL_DATABASE: testdrive
        # command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci # The simple way to override the mariadb config.
        networks:
            - internal
############### MongoDB
    # mongo:
    #     image: mongo
    #     volumes:
    #         - ./docker/runtime/mongo:/var/lib/mongodb
    #     restart: always
    #     command: mongod --smallfiles --logpath=/dev/null # --quiet
    #     networks:
    #         - internal

################ Cache-memory images.
    # redis:
    #     image: redis:alpine
    #     networks:
    #         - internal

    # memcached:
    #     image: memcached:alpine
    #     networks:
    #         - internal

################ Network
networks:
  internal:
    driver_opts:
      internal: "true"
    driver: bridge      
  shared:
    driver_opts:
      enable_ipv6: "true"
    driver: bridge
    ipam:
     config:
       - subnet: 172.55.0.0/16
         gateway: 172.55.0.1
